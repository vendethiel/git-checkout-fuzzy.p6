#!/usr/bin/env perl6

my @branches = (run <git for-each-ref --format='%(refname:short)' refs/heads>, :out).out.slurp-rest.lines;
@branches.=map: { S:g/"'"// };

my @ignores;
try { @ignores = lines slurp("$*HOME/.co-ignore"); }

sub filter-ignores {
  for @ignores -> $ignore {
    @branches.=grep({ $_ !~~ /$ignore/ });
  }
}

multi sub MAIN(*@hints, Bool :$s = False) {
  # check for perfect match *before* excluding ignores
  if @hints == 1 && any(@branches) eq @hints {
    @branches = @hints;
  } else {
    for @hints {
      @branches.=grep(/$_/);
    }
    filter-ignores;
  }
  given @branches {
    when * > 1 {
      say "{+@branches} branches found:";
      display(@hints);
    }
    when 1 {
      if $s {
        # Only output branch name. Allows to i.e.: git rebase `co -s ...`
        # (be careful if you do this. But it's not too dangerous -- if there's an ambiguity, it'll error (trying to parse "X branches found:" as a branch name))
        # XXX => then should the errorcode be 0 only if a matching branch was found..?
        say @branches[0];
      } else {
        run <<git checkout @branches[0]>>;
      }
    }
    when 0 {
      say "No branch matching these hints!";
    }
  }
}

multi sub MAIN(Bool :$s = False) {
  if $s {
    print trim run(<git rev-parse --abbrev-ref HEAD>, :out).out.slurp-rest;
  } else {
    say "Available branches:";
    filter-ignores;
    display;
  }
}

sub display(@hints = ()) {
  say @branches.map({ s:g[(@hints)] = "\e[0;31m$0\e[0m"; " - $_" }).join: "\n";
}
